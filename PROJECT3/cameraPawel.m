% Auto-generated by cameraCalibrator app on 26-Apr-2020
%-------------------------------------------------------


% Define images to process
imageFileNames = {'D:\PAWEL\STUDIA\PERM\PERM\PROJECT3\calib_pawel\IMG_20200426_150313.jpg',...
    'D:\PAWEL\STUDIA\PERM\PERM\PROJECT3\calib_pawel\IMG_20200426_150315.jpg',...
    'D:\PAWEL\STUDIA\PERM\PERM\PROJECT3\calib_pawel\IMG_20200426_150324.jpg',...
    'D:\PAWEL\STUDIA\PERM\PERM\PROJECT3\calib_pawel\IMG_20200426_150330.jpg',...
    'D:\PAWEL\STUDIA\PERM\PERM\PROJECT3\calib_pawel\IMG_20200426_150331.jpg',...
    'D:\PAWEL\STUDIA\PERM\PERM\PROJECT3\calib_pawel\IMG_20200426_150333.jpg',...
    'D:\PAWEL\STUDIA\PERM\PERM\PROJECT3\calib_pawel\IMG_20200426_150334.jpg',...
    'D:\PAWEL\STUDIA\PERM\PERM\PROJECT3\calib_pawel\IMG_20200426_150339.jpg',...
    'D:\PAWEL\STUDIA\PERM\PERM\PROJECT3\calib_pawel\IMG_20200426_150341.jpg',...
    'D:\PAWEL\STUDIA\PERM\PERM\PROJECT3\calib_pawel\IMG_20200426_150342.jpg',...
    'D:\PAWEL\STUDIA\PERM\PERM\PROJECT3\calib_pawel\IMG_20200426_150348.jpg',...
    'D:\PAWEL\STUDIA\PERM\PERM\PROJECT3\calib_pawel\IMG_20200426_150352.jpg',...
    'D:\PAWEL\STUDIA\PERM\PERM\PROJECT3\calib_pawel\IMG_20200426_150356.jpg',...
    'D:\PAWEL\STUDIA\PERM\PERM\PROJECT3\calib_pawel\IMG_20200426_150405.jpg',...
    'D:\PAWEL\STUDIA\PERM\PERM\PROJECT3\calib_pawel\IMG_20200426_150412.jpg',...
    'D:\PAWEL\STUDIA\PERM\PERM\PROJECT3\calib_pawel\IMG_20200426_150416.jpg',...
    'D:\PAWEL\STUDIA\PERM\PERM\PROJECT3\calib_pawel\IMG_20200426_150421.jpg',...
    };
% Detect checkerboards in images
[imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(imageFileNames);
imageFileNames = imageFileNames(imagesUsed);

% Read the first image to obtain image size
imageIndex=3;
originalImage = imread(imageFileNames{imageIndex});
[mrows, ncols, ~] = size(originalImage);

% Generate world coordinates of the corners of the squares
squareSize = 30;  % in units of 'millimeters'
worldPoints = generateCheckerboardPoints(boardSize, squareSize);

% Calibrate the camera
[cameraParams, imagesUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
    'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
    'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
    'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
    'ImageSize', [mrows, ncols]);

% View reprojection errors
h1=figure; showReprojectionErrors(cameraParams);

% Visualize pattern locations
h2=figure; showExtrinsics(cameraParams, 'CameraCentric');

% Display parameter estimation errors
displayErrors(estimationErrors, cameraParams);

% For example, you can use the calibration data to remove effects of lens distortion.
undistortedImage = undistortImage(originalImage, cameraParams);

h3 = figure;
imshow(originalImage); 
hold on;
plot(imagePoints(:,1,imageIndex), imagePoints(:,2,imageIndex),'go');
plot(cameraParams.ReprojectedPoints(:,1,imageIndex),cameraParams.ReprojectedPoints(:,2,imageIndex),'r+');
legend('Detected Points','ReprojectedPoints');
title ("OBRAZ ORIGINALNY");
hold off;

h4 = figure;
imshow(undistortedImage); 
title("ODTWORZONY OBRAZ");


% See additional examples of how to use the calibration data.  At the prompt type:
% showdemo('MeasuringPlanarObjectsExample')
% showdemo('StructureFromMotionExample')

saveas(h1,'.\img\task2ReprojectionErrors\prCameraReprojectionErrors.png');
saveas(h2,'.\img\task2Extrinsics\prCameraExtrinsics.png');
saveas(h3,'.\img\task2Image\prCameraOriginal.png');
saveas(h4,'.\img\task2Image\prCameraUndistorted.png');